// Code generated by mockery v2.42.1. DO NOT EDIT.

package ports

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockConfigure is an autogenerated mock type for the Configure type
type MockConfigure struct {
	mock.Mock
}

type MockConfigure_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigure) EXPECT() *MockConfigure_Expecter {
	return &MockConfigure_Expecter{mock: &_m.Mock}
}

// Configure provides a mock function with given fields: _a0, _a1
func (_m *MockConfigure) Configure(_a0 context.Context, _a1 ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Configure")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigure_Configure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configure'
type MockConfigure_Configure_Call struct {
	*mock.Call
}

// Configure is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...interface{}
func (_e *MockConfigure_Expecter) Configure(_a0 interface{}, _a1 ...interface{}) *MockConfigure_Configure_Call {
	return &MockConfigure_Configure_Call{Call: _e.mock.On("Configure",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockConfigure_Configure_Call) Run(run func(_a0 context.Context, _a1 ...interface{})) *MockConfigure_Configure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockConfigure_Configure_Call) Return(_a0 error) *MockConfigure_Configure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigure_Configure_Call) RunAndReturn(run func(context.Context, ...interface{}) error) *MockConfigure_Configure_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigure creates a new instance of MockConfigure. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigure(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigure {
	mock := &MockConfigure{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
