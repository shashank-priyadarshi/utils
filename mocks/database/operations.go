// Code generated by mockery v2.42.1. DO NOT EDIT.

package ports

import (
	context "context"

	models "github.com/shashank-priyadarshi/utilities/database/models"
	mock "github.com/stretchr/testify/mock"
)

// MockOperations is an autogenerated mock type for the Operations type
type MockOperations struct {
	mock.Mock
}

type MockOperations_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOperations) EXPECT() *MockOperations_Expecter {
	return &MockOperations_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockOperations) Create(_a0 context.Context, _a1 ...interface{}) (*models.Response, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) (*models.Response, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *models.Response); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperations_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOperations_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...interface{}
func (_e *MockOperations_Expecter) Create(_a0 interface{}, _a1 ...interface{}) *MockOperations_Create_Call {
	return &MockOperations_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockOperations_Create_Call) Run(run func(_a0 context.Context, _a1 ...interface{})) *MockOperations_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockOperations_Create_Call) Return(_a0 *models.Response, _a1 error) *MockOperations_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperations_Create_Call) RunAndReturn(run func(context.Context, ...interface{}) (*models.Response, error)) *MockOperations_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockOperations) Delete(_a0 context.Context, _a1 ...interface{}) (*models.Response, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *models.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) (*models.Response, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *models.Response); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperations_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockOperations_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...interface{}
func (_e *MockOperations_Expecter) Delete(_a0 interface{}, _a1 ...interface{}) *MockOperations_Delete_Call {
	return &MockOperations_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockOperations_Delete_Call) Run(run func(_a0 context.Context, _a1 ...interface{})) *MockOperations_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockOperations_Delete_Call) Return(_a0 *models.Response, _a1 error) *MockOperations_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperations_Delete_Call) RunAndReturn(run func(context.Context, ...interface{}) (*models.Response, error)) *MockOperations_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: _a0, _a1
func (_m *MockOperations) Query(_a0 context.Context, _a1 ...interface{}) (*models.Response, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *models.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) (*models.Response, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *models.Response); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperations_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockOperations_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...interface{}
func (_e *MockOperations_Expecter) Query(_a0 interface{}, _a1 ...interface{}) *MockOperations_Query_Call {
	return &MockOperations_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockOperations_Query_Call) Run(run func(_a0 context.Context, _a1 ...interface{})) *MockOperations_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockOperations_Query_Call) Return(_a0 *models.Response, _a1 error) *MockOperations_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperations_Query_Call) RunAndReturn(run func(context.Context, ...interface{}) (*models.Response, error)) *MockOperations_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MockOperations) Update(_a0 context.Context, _a1 ...interface{}) (*models.Response, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) (*models.Response, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *models.Response); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperations_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockOperations_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...interface{}
func (_e *MockOperations_Expecter) Update(_a0 interface{}, _a1 ...interface{}) *MockOperations_Update_Call {
	return &MockOperations_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockOperations_Update_Call) Run(run func(_a0 context.Context, _a1 ...interface{})) *MockOperations_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockOperations_Update_Call) Return(_a0 *models.Response, _a1 error) *MockOperations_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperations_Update_Call) RunAndReturn(run func(context.Context, ...interface{}) (*models.Response, error)) *MockOperations_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOperations creates a new instance of MockOperations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOperations(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOperations {
	mock := &MockOperations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
